name: Spring Boot CI/CD

on:
  push:
    branches: [ "master" ]
  pull_request:
    branches: [ "master" ] 

env:
  DOCKER_IMAGE_NAME: sounghan94/hof-0.0.1-snapshot

jobs:
  # 1️⃣ Spring Boot 빌드 및 Docker Hub에 이미지 푸시
  build-and-push-docker:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout 코드 가져오기
      uses: actions/checkout@v3

    - name: Set up JDK 17
      uses: actions/setup-java@v3
      with:
        java-version: '17'
        distribution: 'temurin'

    - name: Grant execute permission to Gradle wrapper
      run: chmod +x ./gradlew

    - name: Clean build cache
      run: ./gradlew clean

    - name: Set AWS & MongoDB environment variables and build with Gradle
      run: |
        export AWS_ACCESS_KEY_ID=${{ secrets.AWS_ACCESS_KEY_ID }}
        export AWS_SECRET_ACCESS_KEY=${{ secrets.AWS_SECRET_ACCESS_KEY }}
        export AWS_S3_BUCKET_NAME=${{ secrets.AWS_S3_BUCKET_NAME }}
        export AWS_REGION=${{ secrets.AWS_REGION }}
        export DB_URL=${{ secrets.DB_URL }}
        export DB_USERNAME=${{ secrets.DB_USERNAME }}
        export DB_PASSWORD=${{ secrets.DB_PASSWORD }}
        export MONGO_URL=${{ secrets.MONGO_URL }}
        export MONGO_USERNAME=${{ secrets.MONGO_USERNAME }}
        export IAMPORT_API_KEY=${{ secrets.IAMPORT_API_KEY }}
        export IAMPORT_API_SECRET=${{ secrets.IAMPORT_API_SECRET }}
        export GOOGLE_CLIENT_EMAIL=${{ secrets.GOOGLE_CLIENT_EMAIL }}
        export GOOGLE_CLIENT_ID=${{ secrets.GOOGLE_CLIENT_ID }}
        export GOOGLE_PRIVATE_KEY="$(echo '${{ secrets.GOOGLE_PRIVATE_KEY }}' | sed 's/\\n/\n/g')"
        export GOOGLE_PRIVATE_KEY_ID=${{ secrets.GOOGLE_PRIVATE_KEY_ID }}
        export GOOGLE_PROJECT_ID=${{ secrets.GOOGLE_PROJECT_ID }}
        export GOOGLE_OAUTH_CLIENT_ID=${{ secrets.GOOGLE_OAUTH_CLIENT_ID }}
        export GOOGLE_OAUTH_CLIENT_SECRET=${{ secrets.GOOGLE_OAUTH_CLIENT_SECRET }}
        ./gradlew build -x test  # ✅ 테스트 제외하고 빌드 (필요하면 -x test 제거)

    - name: Build the Docker image
      run: docker build -t ${{ env.DOCKER_IMAGE_NAME }}:latest .

    - name: Login to Docker Hub using Access Token
      run: echo "${{ secrets.DOCKER_HUB_TOKEN }}" | docker login -u ${{ secrets.DOCKER_USERNAME }} --password-stdin

    - name: Push the Docker image to Docker Hub
      run: docker push ${{ env.DOCKER_IMAGE_NAME }}:latest

  # 2️⃣ EC2에 배포 및 컨테이너 교체
  deploy-to-ec2:
    needs: build-and-push-docker
    runs-on: ubuntu-latest

    steps:
    - name: Deploy to EC2
      uses: appleboy/ssh-action@master
      with:
        host: ${{ secrets.EC2_PUBLIC_IP }}
        username: ubuntu
        key: ${{ secrets.EC2_SSH_PRIVATE_KEY }}
        script: |
          CONTAINER_NAME="hof-container"

          # Swap 설정 추가 (없을 경우)
          if ! grep -q "swapfile" /etc/fstab; then
            echo "Adding Swap Memory..."
            sudo fallocate -l 1G /swapfile
            sudo chmod 600 /swapfile
            sudo mkswap /swapfile
            sudo swapon /swapfile
            echo '/swapfile none swap sw 0 0' | sudo tee -a /etc/fstab
          fi
          
          # 실행 중인 컨테이너 확인 및 종료
          if sudo docker ps -a --format "{{.Names}}" | grep -w "$CONTAINER_NAME"; then
            echo "Stopping and removing existing container: $CONTAINER_NAME"
            sudo docker stop $CONTAINER_NAME
            sudo docker rm $CONTAINER_NAME
          fi
          # 최신 이미지 가져오기
          echo "Pulling the latest Docker image: ${{ env.DOCKER_IMAGE_NAME }}"
          sudo docker pull ${{ env.DOCKER_IMAGE_NAME }}:latest
          # 새로운 컨테이너 실행
          echo "Starting a new container: $CONTAINER_NAME"
          sudo docker run --name $CONTAINER_NAME -d -p 8081:8080 \
            --memory="512m" --memory-swap="1g" \
            -e JAVA_OPTS="-Xms256m -Xmx512m" \
            -e TZ=Asia/Seoul \
            -e AWS_ACCESS_KEY_ID=${{ secrets.AWS_ACCESS_KEY_ID }} \
            -e AWS_SECRET_ACCESS_KEY=${{ secrets.AWS_SECRET_ACCESS_KEY }} \
            -e AWS_S3_BUCKET_NAME=${{ secrets.AWS_S3_BUCKET_NAME }} \
            -e AWS_REGION=${{ secrets.AWS_REGION }} \
            -e DB_URL=${{ secrets.DB_URL }} \
            -e DB_USERNAME=${{ secrets.DB_USERNAME }} \
            -e DB_PASSWORD=${{ secrets.DB_PASSWORD }} \
            -e MONGO_URL=${{ secrets.MONGO_URL }} \
            -e MONGO_USERNAME=${{ secrets.MONGO_USERNAME }} \
            -e IAMPORT_API_KEY=${{ secrets.IAMPORT_API_KEY }} \
            -e IAMPORT_API_SECRET=${{ secrets.IAMPORT_API_SECRET }} \
            -e GOOGLE_CLIENT_EMAIL=${{ secrets.GOOGLE_CLIENT_EMAIL }} \
            -e GOOGLE_CLIENT_ID=${{ secrets.GOOGLE_CLIENT_ID }} \
            -e GOOGLE_PRIVATE_KEY="$(echo '${{ secrets.GOOGLE_PRIVATE_KEY }}' | sed 's/\\n/\n/g')" \
            -e GOOGLE_PRIVATE_KEY_ID=${{ secrets.GOOGLE_PRIVATE_KEY_ID }} \
            -e GOOGLE_PROJECT_ID=${{ secrets.GOOGLE_PROJECT_ID }} \
            -e GOOGLE_OAUTH_CLIENT_ID=${{ secrets.GOOGLE_OAUTH_CLIENT_ID }} \
            -e GOOGLE_OAUTH_CLIENT_SECRET=${{ secrets.GOOGLE_OAUTH_CLIENT_SECRET }} \
            ${{ env.DOCKER_IMAGE_NAME }}:latest
